
@functions{ 
    [Parameter]
    protected String SearchTerm { get; set; }
    bool _isOpen { get; set; } = false;
    [Parameter]
    protected List<String> Suggestions { get; set; } = new List<String>();
    [Parameter] protected Action<String> SuggestionSelected { get; set; }
    [Parameter] protected Action<String> AskForSuggestions { get; set; }
    //Char limit needed to trigger the auto complete
    [Parameter] protected int CharLimit { get; set; } = 3;
    [Parameter] protected string style { get; set; } = "";


    //Define colors
    [Parameter] protected string PrimaryColor { get; set; } = "#1aa8de";



    protected override void OnParametersSet()
    {
        _isOpen = Suggestions.Count > 0;

    }

    protected void GetSuggestion()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            Suggestions.Clear();
            _isOpen = false;
            return;
        }

        if (SearchTerm.Length < CharLimit)
        {
            return;
        }
        Suggestions.Clear();
        AskForSuggestions(SearchTerm);

        //_isOpen = Suggestions.Count > 0;

        this.StateHasChanged();

    }

    void SelectionMade(String selection)
    {
        _isOpen = false;
        SearchTerm = selection;
        SuggestionSelected(SearchTerm);
        this.StateHasChanged();


    }



        }


<style>





    .hide {
        display: none;
    }

    .suggestions {
        background: white;
        position: absolute;
        z-index: 5;
        width: inherit;
    }

    .suggestions-ul {
        list-style-type: none;

    }

    .suggestions-li {
        cursor: pointer;
        width: 100%;
        border-radius: 6px;
        background: white;
        margin: 0px;
        padding: 10px;
    }

        .suggestions-li:hover {
            background: #1ec1ff;
            color: white;
        }

        .suggestions-li:active {
            background: @PrimaryColor ; /*#1aa8de;*/
            color: white;
        }

    .text-omiter {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

</style>

<section style="width:100%;">
   

        <input class=" @style"  bind="@SearchTerm"  oninput="this.blur(); this.focus();" onblur="@(ev => GetSuggestion())"  style="width:inherit;"/>
        <div class="suggestions mt-2 shadow rounded-lg @(_isOpen ? "" : "hide")">
            <ul class="suggestions-ul rounded p-0 m-0 rounded-lg">
                @foreach (var suggestion in Suggestions)
        {
                    <li class="suggestions-li rounded" onclick="@(()=> SelectionMade(suggestion))">@suggestion</li>
    }

               
            </ul>
        </div>
    
</section>